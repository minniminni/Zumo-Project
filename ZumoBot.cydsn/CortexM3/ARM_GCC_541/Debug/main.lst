ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include "FreeRTOS.h"
  35:main.c        **** #include "task.h"
  36:main.c        **** #include "Motor.h"
  37:main.c        **** #include "Ultra.h"
  38:main.c        **** #include "Nunchuk.h"
  39:main.c        **** #include "Reflectance.h"
  40:main.c        **** #include "Gyro.h"
  41:main.c        **** #include "Accel_magnet.h"
  42:main.c        **** #include "LSM303D.h"
  43:main.c        **** #include "IR.h"
  44:main.c        **** #include "Beep.h"
  45:main.c        **** #include "mqtt_sender.h"
  46:main.c        **** #include <time.h>
  47:main.c        **** #include <sys/time.h>
  48:main.c        **** #include "serial1.h"
  49:main.c        **** #include <unistd.h>
  50:main.c        **** #include <stdlib.h>
  51:main.c        **** #define FORWARD 100*0.5
  52:main.c        **** #define RIGHT 200*0.5
  53:main.c        **** #define LEFT 200*0.5
  54:main.c        **** 
  55:main.c        **** #define G5 255
  56:main.c        **** #define G6 255 / 2
  57:main.c        **** #define JOTAIN 230
  58:main.c        **** /**
  59:main.c        ****  * @file    main.c
  60:main.c        ****  * @brief   
  61:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  62:main.c        **** */
  63:main.c        **** 
  64:main.c        **** #if 0
  65:main.c        **** //assignment 1
  66:main.c        **** 
  67:main.c        **** void dot(void);
  68:main.c        **** void dash(void);
  69:main.c        **** 
  70:main.c        **** void zmain(void)
  71:main.c        ****     {
  72:main.c        ****         while(1){
  73:main.c        ****             
  74:main.c        ****             dot();
  75:main.c        ****             
  76:main.c        ****             vTaskDelay(500);
  77:main.c        **** 
  78:main.c        ****             dash();
  79:main.c        **** 
  80:main.c        ****             dot(); 
  81:main.c        ****             
  82:main.c        ****             vTaskDelay(2000);
  83:main.c        ****             
  84:main.c        ****         }
  85:main.c        **** 
  86:main.c        ****     }
  87:main.c        **** 
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 3


  88:main.c        ****     void dot(void) {
  89:main.c        ****         for (int i = 1; i <=3; i++) {
  90:main.c        ****             BatteryLed_Write(1);
  91:main.c        ****             Beep(50, 100);
  92:main.c        ****             vTaskDelay(50);
  93:main.c        ****             BatteryLed_Write(0);
  94:main.c        ****             vTaskDelay(50);
  95:main.c        ****         }
  96:main.c        ****     }
  97:main.c        **** 
  98:main.c        ****     void dash(void) {
  99:main.c        ****         for (int i = 1; i <=3; i++) {
 100:main.c        ****              BatteryLed_Write(1);
 101:main.c        ****             Beep(50, 100);
 102:main.c        ****             vTaskDelay(250);
 103:main.c        ****             BatteryLed_Write(0);
 104:main.c        ****             vTaskDelay(250);
 105:main.c        **** 
 106:main.c        ****         }
 107:main.c        ****     }
 108:main.c        **** 
 109:main.c        **** #endif
 110:main.c        **** 
 111:main.c        **** #if 0
 112:main.c        **** //assignment 2
 113:main.c        ****     
 114:main.c        **** void zmain(void) {
 115:main.c        **** 
 116:main.c        ****     TickType_t start;
 117:main.c        ****     TickType_t end;
 118:main.c        ****     int time, age;
 119:main.c        ****     printf("Enter your age: \n");
 120:main.c        ****     start = xTaskGetTickCount();
 121:main.c        ****     scanf("%d", &age);
 122:main.c        ****     end = xTaskGetTickCount();
 123:main.c        ****     time = (end - start)/1000;
 124:main.c        ****     printf("Execution time: %d \n", time);
 125:main.c        **** 
 126:main.c        ****     if (age < 22) {
 127:main.c        ****         
 128:main.c        ****         if (time < 3) {
 129:main.c        ****             printf("Super fast dude! \n");
 130:main.c        ****         }
 131:main.c        ****         
 132:main.c        ****         else if (time < 5 && time >= 3) {
 133:main.c        ****             printf("So medicore. \n");
 134:main.c        ****         }
 135:main.c        ****         
 136:main.c        ****         else {
 137:main.c        ****             printf("My granny is faster than you! \n");
 138:main.c        ****         }
 139:main.c        ****     }
 140:main.c        ****     
 141:main.c        ****     else if (age >= 22 && age <= 50) {
 142:main.c        ****         
 143:main.c        ****         if (time < 3) {
 144:main.c        ****             printf("Be quick or be dead \n");
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 4


 145:main.c        ****         }
 146:main.c        ****         else if (time < 5 && time >= 3) {
 147:main.c        ****             printf("You are so average. \n");
 148:main.c        ****         }
 149:main.c        ****         else {
 150:main.c        ****             printf("Have you been smoking something illegal? \n");
 151:main.c        ****         }
 152:main.c        ****     }
 153:main.c        **** 
 154:main.c        ****     else {
 155:main.c        ****         
 156:main.c        ****         if (time < 3) {
 157:main.c        ****             printf("Still going strong \n");
 158:main.c        ****         }
 159:main.c        ****         else if (time < 5 && time >= 3) {
 160:main.c        ****             printf("You are doing ok for your age. \n");
 161:main.c        ****         }
 162:main.c        ****         else {
 163:main.c        ****             printf("Do they still allow you to drive? \n");
 164:main.c        ****         }
 165:main.c        ****     }
 166:main.c        ****     
 167:main.c        ****     while(1){
 168:main.c        ****         vTaskDelay(100);
 169:main.c        ****     }
 170:main.c        **** }
 171:main.c        **** 
 172:main.c        **** #endif
 173:main.c        **** 
 174:main.c        **** #if 0
 175:main.c        **** //assignment 3
 176:main.c        **** //int i;    
 177:main.c        **** void flash(void);
 178:main.c        **** 
 179:main.c        **** void zmain(void){
 180:main.c        ****     
 181:main.c        ****     ADC_Battery_Start();
 182:main.c        **** 
 183:main.c        ****     int16 adcresult =0;
 184:main.c        ****     float volts = 0.0;
 185:main.c        ****     float percentage;
 186:main.c        ****  
 187:main.c        ****     printf("\nStart\n");
 188:main.c        **** 
 189:main.c        ****     BatteryLed_Write(0); 
 190:main.c        **** 
 191:main.c        **** 
 192:main.c        ****     while(true)
 193:main.c        ****     {
 194:main.c        **** 
 195:main.c        ****         ADC_Battery_StartConvert(); 
 196:main.c        ****         if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {
 197:main.c        ****             
 198:main.c        ****             adcresult = ADC_Battery_GetResult16();
 199:main.c        ****             percentage = (adcresult / 4095.0) * 5;
 200:main.c        ****             volts = percentage * 1.5;
 201:main.c        **** 
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 5


 202:main.c        ****             printf("ADC value: %d Volts: %.2f\r\n", adcresult, volts);
 203:main.c        ****             vTaskDelay(500);
 204:main.c        ****         }
 205:main.c        **** 
 206:main.c        ****     while (volts < 4) {
 207:main.c        ****             
 208:main.c        ****         flash();
 209:main.c        **** 
 210:main.c        ****         if (SW1_Read() == 0) {
 211:main.c        ****             
 212:main.c        ****             BatteryLed_Write(0);
 213:main.c        ****             break;
 214:main.c        **** 
 215:main.c        ****             }
 216:main.c        ****         }
 217:main.c        ****     }
 218:main.c        **** }
 219:main.c        **** 
 220:main.c        **** void flash(void) {
 221:main.c        **** for (int i = 1; i <=3; i++) {
 222:main.c        **** BatteryLed_Write(1);
 223:main.c        **** vTaskDelay(500);
 224:main.c        **** BatteryLed_Write(0);
 225:main.c        **** vTaskDelay(500);
 226:main.c        **** }
 227:main.c        **** }
 228:main.c        **** 
 229:main.c        **** #endif
 230:main.c        **** 
 231:main.c        **** #if 0
 232:main.c        **** // Hello World!
 233:main.c        **** void zmain(void)
 234:main.c        **** {
 235:main.c        ****     printf("\nHello, World!\n");
 236:main.c        **** 
 237:main.c        ****     while(true)
 238:main.c        ****     {
 239:main.c        ****         vTaskDelay(100); // sleep (in an infinite loop)
 240:main.c        ****     }
 241:main.c        ****  }   
 242:main.c        **** #endif
 243:main.c        **** 
 244:main.c        **** #if 0
 245:main.c        **** // Name and age
 246:main.c        **** void zmain(void)
 247:main.c        **** {
 248:main.c        ****     char name[32];
 249:main.c        ****     int age;
 250:main.c        ****     
 251:main.c        ****     
 252:main.c        ****     printf("\n\n");
 253:main.c        ****     
 254:main.c        ****     printf("Enter your name: ");
 255:main.c        ****     //fflush(stdout);
 256:main.c        ****     scanf("%s", name);
 257:main.c        ****     printf("Enter your age: ");
 258:main.c        ****     //fflush(stdout);
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 6


 259:main.c        ****     scanf("%d", &age);
 260:main.c        ****     
 261:main.c        ****     printf("You are [%s], age = %d\n", name, age);
 262:main.c        **** 
 263:main.c        ****     while(true)
 264:main.c        ****     {
 265:main.c        ****         BatteryLed_Write(!SW1_Read());
 266:main.c        ****         vTaskDelay(100);
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** 
 272:main.c        **** #if 0
 273:main.c        **** //battery level//
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     ADC_Battery_Start();        
 277:main.c        **** 
 278:main.c        ****     int16 adcresult =0;
 279:main.c        ****     float volts = 0.0;
 280:main.c        **** 
 281:main.c        ****     printf("\nBoot\n");
 282:main.c        **** 
 283:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 284:main.c        ****     BatteryLed_Write(0); // Switch led off 
 285:main.c        ****     //uint8 button;
 286:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 287:main.c        ****     // SW1_Read() returns zero when button is pressed
 288:main.c        ****     // SW1_Read() returns one when button is not pressed
 289:main.c        **** 
 290:main.c        ****     while(true)
 291:main.c        ****     {
 292:main.c        ****         char msg[80];
 293:main.c        ****         ADC_Battery_StartConvert(); // start sampling
 294:main.c        ****         if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted 
 295:main.c        ****             adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 296:main.c        ****             // convert value to Volts
 297:main.c        ****             // you need to implement the conversion
 298:main.c        ****             
 299:main.c        ****             // Print both ADC results and converted value
 300:main.c        ****             printf("%d %f\r\n",adcresult, volts);
 301:main.c        ****         }
 302:main.c        ****         vTaskDelay(500);
 303:main.c        ****     }
 304:main.c        ****  }   
 305:main.c        **** #endif
 306:main.c        **** 
 307:main.c        **** #if 0
 308:main.c        **** // button
 309:main.c        **** void zmain(void)
 310:main.c        **** {
 311:main.c        ****     while(true) {
 312:main.c        ****         printf("Press button within 5 seconds!\n");
 313:main.c        ****         int i = 50;
 314:main.c        ****         while(i > 0) {
 315:main.c        ****             if(SW1_Read() == 0) {
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 7


 316:main.c        ****                 break;
 317:main.c        ****             }
 318:main.c        ****             vTaskDelay(100);
 319:main.c        ****             --i;
 320:main.c        ****         }
 321:main.c        ****         if(i > 0) {
 322:main.c        ****             printf("Good work\n");
 323:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 324:main.c        ****         }
 325:main.c        ****         else {
 326:main.c        ****             printf("You didn't press the button\n");
 327:main.c        ****         }
 328:main.c        ****     }
 329:main.c        **** }
 330:main.c        **** #endif
 331:main.c        **** 
 332:main.c        **** #if 0
 333:main.c        **** // button
 334:main.c        **** void zmain(void)
 335:main.c        **** {
 336:main.c        ****     printf("\nBoot\n");
 337:main.c        **** 
 338:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 339:main.c        ****     BatteryLed_Write(0); // Switch led off 
 340:main.c        ****     
 341:main.c        ****     //uint8 button;
 342:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 343:main.c        ****     // SW1_Read() returns zero when button is pressed
 344:main.c        ****     // SW1_Read() returns one when button is not pressed
 345:main.c        ****     
 346:main.c        ****     bool led = false;
 347:main.c        ****     
 348:main.c        ****     while(true)
 349:main.c        ****     {
 350:main.c        ****         // toggle led state when button is pressed
 351:main.c        ****         if(SW1_Read() == 0) {
 352:main.c        ****             led = !led;
 353:main.c        ****             BatteryLed_Write(led);
 354:main.c        ****             if(led) printf("Led is ON\n");
 355:main.c        ****             else printf("Led is OFF\n");
 356:main.c        ****             Beep(1000, 150);
 357:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 358:main.c        ****         }        
 359:main.c        ****     }
 360:main.c        ****  }   
 361:main.c        **** #endif
 362:main.c        **** 
 363:main.c        **** 
 364:main.c        **** #if 0
 365:main.c        **** //ultrasonic sensor// week 3 //assignment 2
 366:main.c        **** void zmain(void)
 367:main.c        **** {
 368:main.c        ****     
 369:main.c        ****     vTaskDelay(1000);
 370:main.c        ****     
 371:main.c        ****     Ultra_Start();              // Ultra Sonic Start function
 372:main.c        ****     motor_start();              // enable motor controller
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 8


 373:main.c        ****        
 374:main.c        ****     while (true){
 375:main.c        ****         
 376:main.c        ****         motor_forward(100, 10);    // moving forward
 377:main.c        ****         
 378:main.c        ****         int d = Ultra_GetDistance();
 379:main.c        **** 
 380:main.c        ****                 printf("distance = %d\r\n", d);           // Print the detected distance (centimete
 381:main.c        **** 
 382:main.c        ****                     if(d < 10)
 383:main.c        ****                     
 384:main.c        ****                         {
 385:main.c        ****                             Beep(100, 150);
 386:main.c        ****                             
 387:main.c        ****                             motor_backward(100, 500);     // moving backward
 388:main.c        ****                             
 389:main.c        ****                             motor_turn(200, 0, 500);      // turn
 390:main.c        ****                             
 391:main.c        ****                             //motor_forward(0,0);         // stop motors
 392:main.c        ****                             
 393:main.c        ****                             //motor_stop();               // disable motor controller
 394:main.c        ****                             
 395:main.c        ****                         }
 396:main.c        ****                 }        
 397:main.c        **** }   
 398:main.c        **** #endif
 399:main.c        **** 
 400:main.c        **** #if 0
 401:main.c        **** //accelerometer// week 3 //assignment 3
 402:main.c        **** void zmain(void)
 403:main.c        ****     {
 404:main.c        ****         
 405:main.c        ****     vTaskDelay(1000);
 406:main.c        ****     
 407:main.c        ****     
 408:main.c        ****     void randomrun();
 409:main.c        ****     void escape();
 410:main.c        ****     void attack();
 411:main.c        ****     
 412:main.c        ****     while(SW1_Read() == 1)             // Wait for user button
 413:main.c        ****         {
 414:main.c        ****             vTaskDelay(1000);
 415:main.c        ****         }
 416:main.c        ****     
 417:main.c        ****     motor_start();              // enable motor controller
 418:main.c        ****         
 419:main.c        ****     struct accData_ data;
 420:main.c        **** 
 421:main.c        ****     printf("Accelerometer test...\n");
 422:main.c        ****         if(!LSM303D_Start()){
 423:main.c        **** 
 424:main.c        ****             printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 425:main.c        ****             while(1) vTaskDelay(10);
 426:main.c        **** 
 427:main.c        ****         }
 428:main.c        ****         
 429:main.c        ****     else
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 9


 430:main.c        ****     printf("Device Ok...\n");
 431:main.c        **** 
 432:main.c        **** 
 433:main.c        ****     while(true)
 434:main.c        ****         {     
 435:main.c        ****             
 436:main.c        ****             randomrun();
 437:main.c        ****                           
 438:main.c        ****             LSM303D_Read_Acc(&data);
 439:main.c        ****             
 440:main.c        ****             int x = data.accX * (-1);
 441:main.c        ****             int y = data.accY * (-1);
 442:main.c        ****             
 443:main.c        ****             printf("x=%d \t y=%d\n", x, y);
 444:main.c        ****             
 445:main.c        ****             if (x > 2500)
 446:main.c        ****             {
 447:main.c        ****                 //escape();
 448:main.c        ****                 attack();
 449:main.c        ****             }
 450:main.c        ****         }
 451:main.c        ****     }
 452:main.c        ****     
 453:main.c        **** void randomrun(void)
 454:main.c        ****     {
 455:main.c        ****         int r = rand() % 1000;
 456:main.c        ****      
 457:main.c        ****         if (r < 990)
 458:main.c        ****         {
 459:main.c        ****             motor_forward(232, 10);
 460:main.c        ****         }
 461:main.c        ****             
 462:main.c        ****         else if (r > 990 && r < 995)
 463:main.c        ****         {
 464:main.c        ****             motor_turn(150, 50, 500);
 465:main.c        ****         }
 466:main.c        ****             
 467:main.c        ****         else if (r > 995)
 468:main.c        ****         {
 469:main.c        ****             motor_turn(50, 150, 500);
 470:main.c        ****         }
 471:main.c        ****     }
 472:main.c        ****     
 473:main.c        **** void escape(void)
 474:main.c        ****     {
 475:main.c        ****         int r = rand() % 10;
 476:main.c        ****         
 477:main.c        ****         motor_backward(150, 1000);
 478:main.c        ****         
 479:main.c        ****         if (r < 5)
 480:main.c        ****         {
 481:main.c        ****             motor_turn(200, 0, 500);
 482:main.c        ****         }
 483:main.c        ****         
 484:main.c        ****         else if (r > 5)
 485:main.c        ****         {
 486:main.c        ****             motor_turn(0, 200, 500);
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****     
 490:main.c        **** void attack(void)
 491:main.c        ****     {
 492:main.c        ****         int r = rand() % 10;
 493:main.c        ****         
 494:main.c        ****         motor_backward(150, 1000);
 495:main.c        ****         
 496:main.c        ****         if (r < 5)
 497:main.c        ****         {
 498:main.c        ****             motor_turn(200, 0, 500);
 499:main.c        ****         }
 500:main.c        ****         
 501:main.c        ****         else if (r > 5)
 502:main.c        ****         {
 503:main.c        ****             motor_turn(0, 200, 500);
 504:main.c        ****         }
 505:main.c        ****     }    
 506:main.c        ****         
 507:main.c        **** #endif
 508:main.c        **** 
 509:main.c        **** #if 0
 510:main.c        **** //IR receiverm - how to wait for IR remote commands
 511:main.c        **** void zmain(void)
 512:main.c        **** {
 513:main.c        ****     IR_Start();
 514:main.c        ****     
 515:main.c        ****     printf("\n\nIR test\n");
 516:main.c        ****     
 517:main.c        ****     IR_flush(); // clear IR receive buffer
 518:main.c        ****     printf("Buffer cleared\n");
 519:main.c        ****     
 520:main.c        ****     bool led = false;
 521:main.c        ****     // Toggle led when IR signal is received
 522:main.c        ****     while(true)
 523:main.c        ****     {
 524:main.c        ****         IR_wait();  // wait for IR command
 525:main.c        ****         led = !led;
 526:main.c        ****         BatteryLed_Write(led);
 527:main.c        ****         if(led) printf("Led is ON\n");
 528:main.c        ****         else printf("Led is OFF\n");
 529:main.c        ****     }    
 530:main.c        ****  }   
 531:main.c        **** #endif
 532:main.c        **** 
 533:main.c        **** 
 534:main.c        **** 
 535:main.c        **** #if 0
 536:main.c        **** //IR receiver - read raw data //week 4 //assigment 1//
 537:main.c        **** void zmain(void)
 538:main.c        **** {
 539:main.c        ****     while(true){
 540:main.c        ****         
 541:main.c        ****         if (SW1_Read() == 0) 
 542:main.c        ****             {
 543:main.c        ****             
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 11


 544:main.c        ****             motor_start();              // enable motor controller
 545:main.c        **** 
 546:main.c        ****             vTaskDelay(1000);
 547:main.c        ****             
 548:main.c        ****             motor_forward(100,2000);
 549:main.c        ****              
 550:main.c        ****             motor_forward(0,0);         // stop motors
 551:main.c        **** 
 552:main.c        ****             motor_stop();               // disable motor controller
 553:main.c        ****            
 554:main.c        ****             break;
 555:main.c        ****             
 556:main.c        ****             }
 557:main.c        ****                
 558:main.c        ****         }
 559:main.c        ****     
 560:main.c        ****     IR_Start();
 561:main.c        ****     
 562:main.c        ****     uint32_t IR_val; 
 563:main.c        ****     
 564:main.c        ****     printf("\n\nIR test\nHello humans!!\n");
 565:main.c        ****     
 566:main.c        ****     IR_flush(); // clear IR receive buffer
 567:main.c        ****     printf("Buffer cleared\n");
 568:main.c        ****     
 569:main.c        ****         
 570:main.c        ****     
 571:main.c        ****     // print received IR pulses and their lengths
 572:main.c        ****     while(true)
 573:main.c        ****     {
 574:main.c        ****         if(IR_get(&IR_val, portMAX_DELAY)) {
 575:main.c        ****             int l = IR_val & IR_SIGNAL_MASK; // get pulse length
 576:main.c        ****             int b = 0;
 577:main.c        ****             if((IR_val & IR_SIGNAL_HIGH) != 0) b = 1; // get pulse state (0/1)
 578:main.c        ****             printf("%d %d\r\n",b, l);
 579:main.c        ****             
 580:main.c        ****             Beep(150,150);
 581:main.c        ****             //vTaskDelay(1000);
 582:main.c        ****             IR_flush();
 583:main.c        ****             
 584:main.c        ****             break;
 585:main.c        ****         }
 586:main.c        ****     }
 587:main.c        ****     
 588:main.c        ****     while(true)
 589:main.c        ****     {
 590:main.c        ****         motor_start();
 591:main.c        ****         motor_forward(100,2000);
 592:main.c        ****         
 593:main.c        ****         motor_forward(0,0);         // stop motors
 594:main.c        **** 
 595:main.c        ****         motor_stop();               // disable motor controller
 596:main.c        ****         
 597:main.c        ****         break;
 598:main.c        ****     }
 599:main.c        ****  }   
 600:main.c        **** #endif
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 12


 601:main.c        **** 
 602:main.c        **** 
 603:main.c        **** #if 0
 604:main.c        **** //reflectance
 605:main.c        ****     
 606:main.c        **** int onblack, onwhite, passed;    
 607:main.c        ****     
 608:main.c        **** void zmain(void)
 609:main.c        **** {   
 610:main.c        ****     void linecounter();
 611:main.c        ****     void reflectancedrive();
 612:main.c        ****         
 613:main.c        ****     IR_Start();    
 614:main.c        ****     uint32_t IR_val;     
 615:main.c        ****     IR_flush();
 616:main.c        ****    
 617:main.c        ****     motor_start();
 618:main.c        ****     
 619:main.c        ****     while(SW1_Read() == 1)             // Wait for user button
 620:main.c        ****         {
 621:main.c        ****             vTaskDelay(1000);
 622:main.c        ****         }
 623:main.c        ****     while(true)             // Drive to first line
 624:main.c        ****     {
 625:main.c        ****         
 626:main.c        ****         linecounter();
 627:main.c        ****         
 628:main.c        ****         reflectancedrive();
 629:main.c        ****         
 630:main.c        ****         if(onblack==1)
 631:main.c        ****             {
 632:main.c        ****                 Beep(100, 100);
 633:main.c        ****                 motor_forward(0, 0);
 634:main.c        ****                 break;
 635:main.c        ****             }
 636:main.c        ****                
 637:main.c        ****     }
 638:main.c        ****     
 639:main.c        ****     while(true)             // Wait for IR signal
 640:main.c        ****     {
 641:main.c        ****         if(IR_get(&IR_val, portMAX_DELAY)) {
 642:main.c        ****             int l = IR_val & IR_SIGNAL_MASK; // get pulse length
 643:main.c        ****             int b = 0;
 644:main.c        ****             if((IR_val & IR_SIGNAL_HIGH) != 0) b = 1; // get pulse state (0/1)
 645:main.c        ****             printf("%d %d\r\n",b, l);
 646:main.c        ****             
 647:main.c        ****             Beep(150,150);
 648:main.c        ****             IR_flush();
 649:main.c        ****                       
 650:main.c        ****             break;
 651:main.c        ****         }
 652:main.c        ****     }
 653:main.c        **** 
 654:main.c        ****     while(true)             // Drive
 655:main.c        ****     {               
 656:main.c        ****         linecounter();
 657:main.c        ****         
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 13


 658:main.c        ****         reflectancedrive();
 659:main.c        ****     }
 660:main.c        **** }   
 661:main.c        **** 
 662:main.c        **** void linecounter(void)
 663:main.c        ****     {
 664:main.c        ****         struct sensors_ ref;
 665:main.c        ****         struct sensors_ dig;
 666:main.c        **** 
 667:main.c        ****         reflectance_start();
 668:main.c        ****         reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000);
 669:main.c        ****         
 670:main.c        ****         reflectance_read(&ref);
 671:main.c        ****         reflectance_digital(&dig);
 672:main.c        ****         
 673:main.c        ****         printf("Sensor value: %5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2
 674:main.c        ****         printf("a=%d b=%d c=%d\n", onblack, onwhite, passed);
 675:main.c        ****         
 676:main.c        ****         if (dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 1 && dig.r3 == 1)
 677:main.c        ****             {
 678:main.c        ****                 onblack = 1;               
 679:main.c        ****             }
 680:main.c        ****         
 681:main.c        ****         if (dig.l3 != 1 && dig.r3 != 1)
 682:main.c        ****             {
 683:main.c        ****                 onwhite = 1;    
 684:main.c        ****             }      
 685:main.c        ****             
 686:main.c        ****         if(onblack == 1 && onwhite == 1)
 687:main.c        ****             {
 688:main.c        ****                 passed++;
 689:main.c        ****                 onblack = 0;
 690:main.c        ****             }
 691:main.c        ****             
 692:main.c        ****         else{ onwhite = 0; }    
 693:main.c        ****     }
 694:main.c        ****     
 695:main.c        **** void reflectancedrive(void)
 696:main.c        ****     {
 697:main.c        ****     
 698:main.c        ****         struct sensors_ ref;
 699:main.c        ****         struct sensors_ dig;
 700:main.c        **** 
 701:main.c        ****         reflectance_start();
 702:main.c        ****         reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000);
 703:main.c        ****        
 704:main.c        ****         reflectance_read(&ref);
 705:main.c        ****         reflectance_digital(&dig);
 706:main.c        ****         
 707:main.c        ****         void tank_turn_left(uint8, uint32);
 708:main.c        ****         void tank_turn_right(uint8, uint32);
 709:main.c        ****     
 710:main.c        ****         if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 0 && dig.r3 == 0)
 711:main.c        ****             {
 712:main.c        ****                 motor_forward(250, 10);
 713:main.c        ****             }
 714:main.c        ****             
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 14


 715:main.c        ****             else if ((dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 0 && di
 716:main.c        ****                     {
 717:main.c        ****                         vTaskDelay(50);
 718:main.c        ****                         
 719:main.c        ****                         if ((dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 
 720:main.c        ****                         {
 721:main.c        ****                             //motor_turn(0, 200, 400);
 722:main.c        ****                             tank_turn_left(200, 200);
 723:main.c        ****                         }          
 724:main.c        ****                     }
 725:main.c        ****         
 726:main.c        ****                 else if ((dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 1 &
 727:main.c        ****                     {
 728:main.c        ****                         vTaskDelay(50);
 729:main.c        ****                         
 730:main.c        ****                         if ((dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 
 731:main.c        ****                         {
 732:main.c        ****                             //motor_turn(200, 0, 400);
 733:main.c        ****                             tank_turn_right(200, 200);
 734:main.c        ****                         }          
 735:main.c        ****                     }
 736:main.c        ****                       
 737:main.c        ****                     else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 1 && dig.r2 == 
 738:main.c        ****                         {
 739:main.c        ****                             motor_turn(200, 50, 50);             
 740:main.c        ****                         }
 741:main.c        ****                         
 742:main.c        ****                              else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 && d
 743:main.c        ****                                 {
 744:main.c        ****                                     motor_turn(250, 0, 100);             
 745:main.c        ****                                 }
 746:main.c        ****                                 
 747:main.c        ****                                 else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 &
 748:main.c        ****                                 {
 749:main.c        ****                                     motor_turn(255, 0, 200);             
 750:main.c        ****                                 }
 751:main.c        ****                             
 752:main.c        ****                                 else if (dig.l3 == 0 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 0 &
 753:main.c        ****                                     {
 754:main.c        ****                                         motor_turn(50, 200, 50);             
 755:main.c        ****                                     }
 756:main.c        ****                                 
 757:main.c        ****                                     else if (dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 0 && dig.r1 ==
 758:main.c        ****                                         {
 759:main.c        ****                                             motor_turn(0, 250, 100);             
 760:main.c        ****                                         }
 761:main.c        ****                                         
 762:main.c        ****                                         else if (dig.l3 == 1 && dig.l2 == 0 && dig.l1 == 0 && dig.r
 763:main.c        ****                                         {
 764:main.c        ****                                             motor_turn(0, 255, 200);             
 765:main.c        ****                                         }
 766:main.c        ****                                     
 767:main.c        ****                                             else if (passed == 2) // stop //"passed == 2" : stop wh
 768:main.c        ****                                                 {
 769:main.c        ****                                                     motor_forward(0, 0);
 770:main.c        ****                                                 }
 771:main.c        ****                     
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 15


 772:main.c        ****                     else
 773:main.c        ****                     {
 774:main.c        ****                         motor_forward(100, 10);
 775:main.c        ****                     }
 776:main.c        ****     }
 777:main.c        ****     
 778:main.c        ****     void tank_turn_left(uint8 speed, uint32 delay)
 779:main.c        ****     {
 780:main.c        ****         MotorDirLeft_Write(1);      // set LeftMotor forward mode
 781:main.c        ****         MotorDirRight_Write(0);     // set RightMotor forward mode
 782:main.c        ****         PWM_WriteCompare1(speed);
 783:main.c        ****         PWM_WriteCompare2(speed);
 784:main.c        ****         vTaskDelay(delay);
 785:main.c        ****     }
 786:main.c        **** 
 787:main.c        ****     void tank_turn_right(uint8 speed, uint32 delay)
 788:main.c        ****     {
 789:main.c        ****         MotorDirLeft_Write(0);      // set LeftMotor forward mode
 790:main.c        ****         MotorDirRight_Write(1);     // set RightMotor forward mode
 791:main.c        ****         PWM_WriteCompare1(speed); 
 792:main.c        ****         PWM_WriteCompare2(speed);
 793:main.c        ****         vTaskDelay(delay);
 794:main.c        ****     }
 795:main.c        ****     
 796:main.c        **** #endif
 797:main.c        **** 
 798:main.c        **** 
 799:main.c        **** 
 800:main.c        **** #if 0
 801:main.c        **** //reflectance //tank turn
 802:main.c        ****     
 803:main.c        **** int onblack, onwhite, passed;   
 804:main.c        **** void tank_turn_left(uint8, uint32);
 805:main.c        **** void tank_turn_right(uint8, uint32);
 806:main.c        **** void linecounter();
 807:main.c        **** void reflectancedrive();
 808:main.c        ****     
 809:main.c        **** void zmain(void)
 810:main.c        **** {   
 811:main.c        ****     IR_Start();    
 812:main.c        ****     uint32_t IR_val;     
 813:main.c        ****     IR_flush();
 814:main.c        ****    
 815:main.c        ****     motor_start();
 816:main.c        ****     
 817:main.c        ****     while(SW1_Read() == 1);             // Wait for user button
 818:main.c        ****     
 819:main.c        ****     while(true)             // Drive to first line
 820:main.c        ****     {
 821:main.c        ****         
 822:main.c        ****         linecounter();
 823:main.c        ****         
 824:main.c        ****         reflectancedrive();
 825:main.c        ****         
 826:main.c        ****         if(onblack==1)
 827:main.c        ****             {
 828:main.c        ****                 Beep(100, 100);
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 16


 829:main.c        ****                 motor_forward(0, 0);
 830:main.c        ****                 break;
 831:main.c        ****             }
 832:main.c        ****                
 833:main.c        ****     }
 834:main.c        ****     
 835:main.c        ****     while(true)             // Wait for IR signal
 836:main.c        ****     {
 837:main.c        ****         if(IR_get(&IR_val, portMAX_DELAY)) {
 838:main.c        ****             int l = IR_val & IR_SIGNAL_MASK; // get pulse length
 839:main.c        ****             int b = 0;
 840:main.c        ****             if((IR_val & IR_SIGNAL_HIGH) != 0) b = 1; // get pulse state (0/1)
 841:main.c        ****             printf("%d %d\r\n",b, l);
 842:main.c        ****             
 843:main.c        ****             Beep(150,150);
 844:main.c        ****             IR_flush();
 845:main.c        ****                       
 846:main.c        ****             break;
 847:main.c        ****         }
 848:main.c        ****     }
 849:main.c        **** 
 850:main.c        ****     while(true)             // Drive
 851:main.c        ****     {               
 852:main.c        ****         linecounter();
 853:main.c        ****         
 854:main.c        ****         reflectancedrive();
 855:main.c        ****     }
 856:main.c        **** }   
 857:main.c        **** 
 858:main.c        **** void linecounter(void)
 859:main.c        ****     {
 860:main.c        ****         struct sensors_ ref;
 861:main.c        ****         struct sensors_ dig;
 862:main.c        **** 
 863:main.c        ****         reflectance_start();
 864:main.c        ****         reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000);
 865:main.c        ****         
 866:main.c        ****         reflectance_read(&ref);
 867:main.c        ****         reflectance_digital(&dig);
 868:main.c        ****         
 869:main.c        ****         printf("Sensor value: %5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2
 870:main.c        ****         printf("a=%d b=%d c=%d\n", onblack, onwhite, passed);
 871:main.c        ****         
 872:main.c        ****         if (dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 1 && dig.r3 == 1)
 873:main.c        ****             {
 874:main.c        ****                 onblack = 1;               
 875:main.c        ****             }
 876:main.c        ****         
 877:main.c        ****         if (dig.l3 != 1 || dig.r3 != 1)
 878:main.c        ****             {
 879:main.c        ****                 onwhite = 1;    
 880:main.c        ****             }      
 881:main.c        ****             
 882:main.c        ****         if(onblack == 1 && onwhite == 1)
 883:main.c        ****             {
 884:main.c        ****                 passed++;
 885:main.c        ****                 onblack = 0;
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 17


 886:main.c        ****             }
 887:main.c        ****             
 888:main.c        ****         else{ onwhite = 0; }    
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        **** void reflectancedrive(void)
 892:main.c        ****     {
 893:main.c        ****     
 894:main.c        ****         struct sensors_ ref;
 895:main.c        ****         struct sensors_ dig;
 896:main.c        **** 
 897:main.c        ****         reflectance_start();
 898:main.c        ****         reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000);
 899:main.c        ****        
 900:main.c        ****         reflectance_read(&ref);
 901:main.c        ****         reflectance_digital(&dig);
 902:main.c        ****     
 903:main.c        ****         if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 0 && dig.r3 == 0)
 904:main.c        ****             {
 905:main.c        ****                 motor_forward(FORWARD, 10);
 906:main.c        ****             }
 907:main.c        ****             
 908:main.c        ****             else if (onblack == 1 && passed == 1)//(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && di
 909:main.c        ****                     {
 910:main.c        ****                         vTaskDelay(500);
 911:main.c        ****                         tank_turn_left(100, 800);
 912:main.c        ****                     }
 913:main.c        ****         
 914:main.c        ****                 else if ((onblack == 1 && passed == 2) || (onblack == 1 && passed == 3))//(dig.l3 =
 915:main.c        ****                     {
 916:main.c        ****                         vTaskDelay(500);
 917:main.c        ****                         tank_turn_right(100, 800);      
 918:main.c        ****                     }
 919:main.c        ****                       
 920:main.c        ****                     else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 1 && dig.r2 == 
 921:main.c        ****                         {
 922:main.c        ****                             motor_turn(100, 50, 10);             
 923:main.c        ****                         }
 924:main.c        ****                         
 925:main.c        ****                              else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 && d
 926:main.c        ****                                 {
 927:main.c        ****                                     motor_turn(150, 0, 10);             
 928:main.c        ****                                 }
 929:main.c        ****                                 
 930:main.c        ****                                 else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 &
 931:main.c        ****                                 {
 932:main.c        ****                                     motor_turn(150, 0, 10);             
 933:main.c        ****                                 }
 934:main.c        ****                             
 935:main.c        ****                                 else if (dig.l3 == 0 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 0 &
 936:main.c        ****                                     {
 937:main.c        ****                                         motor_turn(50, 100, 10);             
 938:main.c        ****                                     }
 939:main.c        ****                                 
 940:main.c        ****                                     else if (dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 0 && dig.r1 ==
 941:main.c        ****                                         {
 942:main.c        ****                                             motor_turn(0, 150, 10);             
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 18


 943:main.c        ****                                         }
 944:main.c        ****                                         
 945:main.c        ****                                         else if (dig.l3 == 1 && dig.l2 == 0 && dig.l1 == 0 && dig.r
 946:main.c        ****                                         {
 947:main.c        ****                                             motor_turn(0, 150, 10);             
 948:main.c        ****                                         }
 949:main.c        ****                                     
 950:main.c        ****                                             else if (passed == 5) // stop
 951:main.c        ****                                                 {
 952:main.c        ****                                                     motor_forward(0, 0);
 953:main.c        ****                                                 }
 954:main.c        ****                     
 955:main.c        ****                     else
 956:main.c        ****                     {
 957:main.c        ****                         motor_forward(FORWARD, 10);
 958:main.c        ****                     }
 959:main.c        ****     }
 960:main.c        ****    
 961:main.c        **** void tank_turn_left(uint8 speed, uint32 delay)
 962:main.c        **** {
 963:main.c        ****     MotorDirLeft_Write(1);      // set LeftMotor forward mode
 964:main.c        ****     MotorDirRight_Write(0);     // set RightMotor forward mode
 965:main.c        ****     PWM_WriteCompare1(speed);
 966:main.c        ****     PWM_WriteCompare2(speed);
 967:main.c        ****     vTaskDelay(delay);
 968:main.c        **** }
 969:main.c        **** 
 970:main.c        **** void tank_turn_right(uint8 speed, uint32 delay)
 971:main.c        **** {
 972:main.c        ****     MotorDirLeft_Write(0);      // set LeftMotor forward mode
 973:main.c        ****     MotorDirRight_Write(1);     // set RightMotor forward mode
 974:main.c        ****     PWM_WriteCompare1(speed); 
 975:main.c        ****     PWM_WriteCompare2(speed);
 976:main.c        ****     vTaskDelay(delay);
 977:main.c        **** }
 978:main.c        ****     
 979:main.c        **** #endif
 980:main.c        **** 
 981:main.c        **** #if 0
 982:main.c        **** //motor //week 3 //assignment 1
 983:main.c        **** void zmain(void)
 984:main.c        **** {
 985:main.c        ****     while (1){
 986:main.c        ****         
 987:main.c        ****         if (SW1_Read() == 0) {
 988:main.c        ****         
 989:main.c        ****         motor_start();              // enable motor controller
 990:main.c        ****         
 991:main.c        ****         motor_forward(0,0);         // set speed to zero to stop motors
 992:main.c        **** 
 993:main.c        ****         vTaskDelay(1000);
 994:main.c        ****         
 995:main.c        ****         motor_turn(105, 100, 3500);    // moving forward
 996:main.c        **** 
 997:main.c        ****         motor_turn(200,50,645);     // turn
 998:main.c        **** 
 999:main.c        ****         motor_turn(105, 100, 2600);    // moving forward
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 19


1000:main.c        **** 
1001:main.c        ****         motor_turn(200,50,645);     // turn
1002:main.c        ****         
1003:main.c        ****         motor_turn(105, 100, 2650);    // moving forward
1004:main.c        ****         
1005:main.c        ****         motor_turn(200,50,645);     // turn
1006:main.c        ****         
1007:main.c        ****         motor_turn(145,75,1800);    // turn inside
1008:main.c        ****         
1009:main.c        ****         motor_turn(105, 100, 1200);    // moving forward
1010:main.c        ****         
1011:main.c        ****         vTaskDelay(500);
1012:main.c        ****         
1013:main.c        ****         //motor_backward(100,2000);    // moving backward
1014:main.c        ****          
1015:main.c        ****         motor_forward(0,0);         // stop motors
1016:main.c        **** 
1017:main.c        ****         motor_stop();               // disable motor controller
1018:main.c        ****         
1019:main.c        ****         //while(true)
1020:main.c        ****         //{
1021:main.c        ****         //    vTaskDelay(100);
1022:main.c        ****         //}
1023:main.c        ****     }
1024:main.c        ****     }
1025:main.c        ****     
1026:main.c        **** }
1027:main.c        **** #endif
1028:main.c        **** 
1029:main.c        **** #if 0
1030:main.c        **** /* Example of how to use te Accelerometer!!!*/
1031:main.c        **** void zmain(void)
1032:main.c        **** {
1033:main.c        ****     struct accData_ data;
1034:main.c        ****     
1035:main.c        ****     printf("Accelerometer test...\n");
1036:main.c        **** 
1037:main.c        ****     if(!LSM303D_Start()){
1038:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
1039:main.c        ****         vTaskSuspend(NULL);
1040:main.c        ****     }
1041:main.c        ****     else {
1042:main.c        ****         printf("Device Ok...\n");
1043:main.c        ****     }
1044:main.c        ****     
1045:main.c        ****     while(true)
1046:main.c        ****     {
1047:main.c        ****         LSM303D_Read_Acc(&data);
1048:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
1049:main.c        ****         vTaskDelay(50);
1050:main.c        ****     }
1051:main.c        ****  }   
1052:main.c        **** #endif    
1053:main.c        **** 
1054:main.c        **** #if 0
1055:main.c        **** // MQTT test
1056:main.c        **** void zmain(void)
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 20


1057:main.c        **** {
1058:main.c        ****     int ctr = 0;
1059:main.c        **** 
1060:main.c        ****     printf("\nBoot\n");
1061:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
1062:main.c        **** 
1063:main.c        ****     //BatteryLed_Write(1); // Switch led on 
1064:main.c        ****     BatteryLed_Write(0); // Switch led off 
1065:main.c        **** 
1066:main.c        ****     while(true)
1067:main.c        ****     {
1068:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
1069:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
1070:main.c        **** 
1071:main.c        ****         vTaskDelay(1000);
1072:main.c        ****         ctr++;
1073:main.c        ****     }
1074:main.c        ****  }   
1075:main.c        **** #endif
1076:main.c        **** 
1077:main.c        **** 
1078:main.c        **** #if 0
1079:main.c        **** void zmain(void)
1080:main.c        **** {    
1081:main.c        ****     struct accData_ data;
1082:main.c        ****     struct sensors_ ref;
1083:main.c        ****     struct sensors_ dig;
1084:main.c        ****     
1085:main.c        ****     printf("MQTT and sensor test...\n");
1086:main.c        **** 
1087:main.c        ****     if(!LSM303D_Start()){
1088:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
1089:main.c        ****         vTaskSuspend(NULL);
1090:main.c        ****     }
1091:main.c        ****     else {
1092:main.c        ****         printf("Accelerometer Ok...\n");
1093:main.c        ****     }
1094:main.c        ****     
1095:main.c        ****     int ctr = 0;
1096:main.c        ****     reflectance_start();
1097:main.c        ****     while(true)
1098:main.c        ****     {
1099:main.c        ****         LSM303D_Read_Acc(&data);
1100:main.c        ****         // send data when we detect a hit and at 10 second intervals
1101:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
1102:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
1103:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
1104:main.c        ****             reflectance_read(&ref);
1105:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
1106:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
1107:main.c        ****             reflectance_digital(&dig);
1108:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
1109:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
1110:main.c        ****             ctr = 0;
1111:main.c        ****         }
1112:main.c        ****         vTaskDelay(10);
1113:main.c        ****     }
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 21


1114:main.c        ****  }   
1115:main.c        **** 
1116:main.c        **** #endif
1117:main.c        **** 
1118:main.c        **** #if 0
1119:main.c        **** void zmain(void)
1120:main.c        **** {    
1121:main.c        ****     RTC_Start(); // start real time clock
1122:main.c        ****     
1123:main.c        ****     RTC_TIME_DATE now;
1124:main.c        **** 
1125:main.c        ****     // set current time
1126:main.c        ****     now.Hour = 12;
1127:main.c        ****     now.Min = 34;
1128:main.c        ****     now.Sec = 56;
1129:main.c        ****     now.DayOfMonth = 25;
1130:main.c        ****     now.Month = 9;
1131:main.c        ****     now.Year = 2018;
1132:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
1133:main.c        **** 
1134:main.c        ****     while(true)
1135:main.c        ****     {
1136:main.c        ****         if(SW1_Read() == 0) {
1137:main.c        ****             // read the current time
1138:main.c        ****             RTC_DisableInt(); /* Disable Interrupt of RTC Component */
1139:main.c        ****             now = *RTC_ReadTime(); /* copy the current time to a local variable */
1140:main.c        ****             RTC_EnableInt(); /* Enable Interrupt of RTC Component */
1141:main.c        **** 
1142:main.c        ****             // print the current time
1143:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
1144:main.c        ****             
1145:main.c        ****             // wait until button is released
1146:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
1147:main.c        ****         }
1148:main.c        ****         vTaskDelay(50);
1149:main.c        ****     }
1150:main.c        ****  }   
1151:main.c        **** #endif
1152:main.c        **** 
1153:main.c        **** #if 0
1154:main.c        **** 
1155:main.c        ****     // PROJECT // 1:RING //
1156:main.c        **** 
1157:main.c        **** int ooxxoo, oxxooo, oooxxo, xooooo, ooooox, xoooox, x_or_x;    
1158:main.c        **** int x_axle, y_axle, distance;
1159:main.c        **** void sensors();    
1160:main.c        **** void reflectance();
1161:main.c        **** void linefollow();
1162:main.c        **** void ring();
1163:main.c        **** void escape();
1164:main.c        **** void tank_turn_left(uint8, uint32);
1165:main.c        **** void tank_turn_right(uint8, uint32);
1166:main.c        ****     
1167:main.c        **** void zmain(void)
1168:main.c        **** {   
1169:main.c        ****     IR_Start();    
1170:main.c        ****     IR_flush();
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 22


1171:main.c        ****     Ultra_Start();
1172:main.c        ****     motor_start();
1173:main.c        ****     
1174:main.c        ****     while(SW1_Read() == 1);             // Wait for user button
1175:main.c        ****     
1176:main.c        ****     while(true)             // Drive to first line
1177:main.c        ****     {
1178:main.c        ****         sensors();
1179:main.c        ****         
1180:main.c        ****         linefollow();
1181:main.c        ****         
1182:main.c        ****         if(x_or_x == 1)
1183:main.c        ****             {
1184:main.c        ****                 Beep(100,100);
1185:main.c        ****                 motor_forward(0, 0);
1186:main.c        ****                 break;
1187:main.c        ****             }         
1188:main.c        ****     }
1189:main.c        ****     
1190:main.c        ****     while(true)             // Wait for IR signal
1191:main.c        ****     {
1192:main.c        ****         IR_wait();
1193:main.c        ****         Beep(100,50);
1194:main.c        ****         Beep(100,100);
1195:main.c        ****         Beep(100,150);
1196:main.c        ****         Beep(100,200);
1197:main.c        ****         motor_forward(255, 100);
1198:main.c        ****         break;
1199:main.c        ****     }
1200:main.c        **** 
1201:main.c        ****     while(true)             // Drive
1202:main.c        ****     {               
1203:main.c        ****         sensors();
1204:main.c        ****         
1205:main.c        ****         ring();
1206:main.c        ****         
1207:main.c        ****         escape();
1208:main.c        ****     }
1209:main.c        **** }   
1210:main.c        **** 
1211:main.c        **** // Functions:
1212:main.c        **** 
1213:main.c        ****     void sensors(void)
1214:main.c        ****     {
1215:main.c        ****         struct accData_ data;
1216:main.c        ****         struct sensors_ ref;
1217:main.c        ****         struct sensors_ dig;
1218:main.c        **** 
1219:main.c        ****         LSM303D_Start();
1220:main.c        ****         reflectance_start();
1221:main.c        ****         reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000);
1222:main.c        ****         
1223:main.c        ****         reflectance_read(&ref);
1224:main.c        ****         reflectance_digital(&dig);
1225:main.c        ****         
1226:main.c        ****         LSM303D_Read_Acc(&data);
1227:main.c        ****             
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 23


1228:main.c        ****         x_axle = data.accX * (-1);  //effective value for x_axle is 2500!
1229:main.c        ****         y_axle = data.accY * (-1);
1230:main.c        ****             
1231:main.c        ****         /*printf("x-axle=%d \t y-axle=%d\n", x_axle, y_axle);
1232:main.c        ****         
1233:main.c        ****         if (x_axle  > 3000)
1234:main.c        ****             {
1235:main.c        ****                 printf("X\n");
1236:main.c        ****                 Beep(100,100);
1237:main.c        ****             }*/
1238:main.c        ****         
1239:main.c        ****         distance = Ultra_GetDistance(); //set distance value
1240:main.c        ****         
1241:main.c        ****         if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 1 && dig.r1 == 1 && dig.r2 == 0 && dig.r3 == 0)
1242:main.c        ****             {
1243:main.c        ****                 ooxxoo = 1;
1244:main.c        ****             }
1245:main.c        ****             
1246:main.c        ****         else if (dig.l3 == 0 && dig.l2 == 1 && dig.l1 == 1 && dig.r1 == 0 && dig.r2 == 0 && dig.r3 
1247:main.c        ****             {
1248:main.c        ****                 oxxooo = 1;
1249:main.c        ****             }
1250:main.c        ****                 
1251:main.c        ****         else if (dig.l3 == 0 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 1 && dig.r2 == 1 && dig.r3 
1252:main.c        ****             {
1253:main.c        ****                 oooxxo = 1;
1254:main.c        ****             }
1255:main.c        ****             
1256:main.c        ****         else if (dig.l3 == 1 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 && dig.r2 == 0 && dig.r3 
1257:main.c        ****             {
1258:main.c        ****                 xooooo = 1;
1259:main.c        ****             }
1260:main.c        ****             
1261:main.c        ****         else if (dig.l3 == 1 && dig.l2 == 0 && dig.l1 == 0 && dig.r1 == 0 && dig.r2 == 0 && dig.r3 
1262:main.c        ****             {
1263:main.c        ****                 ooooox = 1;
1264:main.c        ****             }      
1265:main.c        ****          
1266:main.c        ****         else if (dig.l3 == 1 && dig.r3 == 1) //set xoooox value
1267:main.c        ****             {
1268:main.c        ****                 xoooox = 1;
1269:main.c        ****             }
1270:main.c        ****             
1271:main.c        ****         else if (dig.l3 == 1 || dig.r3 == 1) //set x_or_x value
1272:main.c        ****             {
1273:main.c        ****                 x_or_x = 1;
1274:main.c        ****             }    
1275:main.c        ****                 
1276:main.c        ****         else ooxxoo = 0, oxxooo = 0, oooxxo = 0, xooooo = 0, ooooox = 0, xoooox = 0, x_or_x = 0;
1277:main.c        ****     }
1278:main.c        ****     
1279:main.c        ****     void linefollow(void)
1280:main.c        ****     {   
1281:main.c        ****         if (ooxxoo == 1)
1282:main.c        ****             {
1283:main.c        ****                 motor_forward(100, 1);
1284:main.c        ****             }
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 24


1285:main.c        ****             
1286:main.c        ****         else if (oxxooo == 1)
1287:main.c        ****             {
1288:main.c        ****                 motor_turn(100, 200, 1);
1289:main.c        ****             }
1290:main.c        ****             
1291:main.c        ****         else if (oooxxo == 1)
1292:main.c        ****             {
1293:main.c        ****                 motor_turn(200, 100, 1);
1294:main.c        ****             }
1295:main.c        ****                 
1296:main.c        ****         else motor_forward(100, 1);
1297:main.c        ****     }
1298:main.c        ****     
1299:main.c        ****     void ring(void)
1300:main.c        ****     {
1301:main.c        ****         int r = rand() % 10;
1302:main.c        ****         
1303:main.c        ****         if (r < 8)                                      // drive forward
1304:main.c        ****         {
1305:main.c        ****             for (int i = 0; i <100; i++)
1306:main.c        ****             {
1307:main.c        ****                 if (x_or_x != 1 && distance > 30)
1308:main.c        ****                     {
1309:main.c        ****                         motor_forward (100, 1);
1310:main.c        ****                     }
1311:main.c        ****                     
1312:main.c        ****                 else break;
1313:main.c        ****             }
1314:main.c        ****         }
1315:main.c        ****             
1316:main.c        ****         if (r == 8)                                      // turn left
1317:main.c        ****                 {
1318:main.c        ****                     for (int i = 0; i <200; i++)
1319:main.c        ****                     {
1320:main.c        ****                         if (x_or_x != 1  && distance > 30)
1321:main.c        ****                             {
1322:main.c        ****                                 motor_turn(0, 255, 1);
1323:main.c        ****                             }
1324:main.c        ****                             
1325:main.c        ****                         else break;  
1326:main.c        ****                     }
1327:main.c        ****                 }
1328:main.c        ****             
1329:main.c        ****         if (r == 9)                                      // turn right
1330:main.c        ****             {
1331:main.c        ****                 for (int i = 0; i <200; i++)
1332:main.c        ****                 {
1333:main.c        ****                     if (x_or_x != 1  && distance > 30)
1334:main.c        ****                         {
1335:main.c        ****                             motor_turn(255, 0, 1);
1336:main.c        ****                         }
1337:main.c        ****                         
1338:main.c        ****                     else break;     
1339:main.c        ****                 }
1340:main.c        ****             }
1341:main.c        ****         
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 25


1342:main.c        ****         if (x_or_x != 1  && distance < 30) //attack
1343:main.c        ****             {
1344:main.c        ****                 motor_forward(255, 1);
1345:main.c        ****             }
1346:main.c        ****     }  
1347:main.c        ****     
1348:main.c        ****     void escape(void)
1349:main.c        ****     {
1350:main.c        ****         int r = rand() % 10;
1351:main.c        ****         
1352:main.c        ****         if (xoooox == 1)
1353:main.c        ****             {
1354:main.c        ****                 motor_backward(255, 200);
1355:main.c        ****                 
1356:main.c        ****                 if (r < 5)
1357:main.c        ****                 {
1358:main.c        ****                     tank_turn_left(255, 300);
1359:main.c        ****                 }
1360:main.c        ****             
1361:main.c        ****                     if (r > 5)
1362:main.c        ****                     {
1363:main.c        ****                         tank_turn_right(255, 300);
1364:main.c        ****                     }
1365:main.c        ****             }
1366:main.c        ****         
1367:main.c        ****         if (x_or_x == 1)
1368:main.c        ****             {
1369:main.c        ****                 if (r < 5)
1370:main.c        ****                 {
1371:main.c        ****                     motor_forward(0, 0);
1372:main.c        ****                     tank_turn_left(255, 100);
1373:main.c        ****                     motor_backward(255, 100);
1374:main.c        ****                 }
1375:main.c        ****             
1376:main.c        ****                     if (r > 5)
1377:main.c        ****                     {
1378:main.c        ****                         motor_forward(0, 0);
1379:main.c        ****                         tank_turn_right(255, 100);
1380:main.c        ****                         motor_backward(255, 100);
1381:main.c        ****                     }
1382:main.c        ****             }
1383:main.c        ****             
1384:main.c        ****         if (x_axle > 3000 && distance > 5)
1385:main.c        ****             {
1386:main.c        ****                 Beep(100, 100);
1387:main.c        ****                 tank_turn_left(255, 200);
1388:main.c        ****             }
1389:main.c        ****             
1390:main.c        ****     }
1391:main.c        **** 
1392:main.c        ****     void tank_turn_left(uint8 speed, uint32 delay)
1393:main.c        ****     {
1394:main.c        ****         MotorDirLeft_Write(1);      // set LeftMotor backward mode
1395:main.c        ****         MotorDirRight_Write(0);     // set RightMotor forward mode
1396:main.c        ****         PWM_WriteCompare1(speed);
1397:main.c        ****         PWM_WriteCompare2(speed);
1398:main.c        ****         vTaskDelay(delay);
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 26


1399:main.c        ****     }
1400:main.c        **** 
1401:main.c        ****     void tank_turn_right(uint8 speed, uint32 delay)
1402:main.c        ****     {
1403:main.c        ****         MotorDirLeft_Write(0);      // set LeftMotor forward mode
1404:main.c        ****         MotorDirRight_Write(1);     // set RightMotor backward mode
1405:main.c        ****         PWM_WriteCompare1(speed); 
1406:main.c        ****         PWM_WriteCompare2(speed);
1407:main.c        ****         vTaskDelay(delay);
1408:main.c        ****     }
1409:main.c        ****     
1410:main.c        **** #endif
1411:main.c        **** 
1412:main.c        **** 
1413:main.c        **** 
1414:main.c        **** #if 1
1415:main.c        **** 
1416:main.c        ****     // PROJECT // 3:MAZE //
1417:main.c        **** 
1418:main.c        **** 
1419:main.c        ****     
1420:main.c        **** void zmain(void)
1421:main.c        **** {
  28              		.loc 1 1421 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
1422:main.c        ****     while(SW1_Read() == 1)
  36              		.loc 1 1422 0
  37 0002 04E0     		b	.L2
  38              	.L3:
1423:main.c        ****     {
1424:main.c        ****         //Beep(1000, G5);    //G-5
1425:main.c        ****         //Beep(1000, G6);  //G-6
1426:main.c        ****         Beep(1000, JOTAIN);  //G-6
  39              		.loc 1 1426 0
  40 0004 E621     		movs	r1, #230
  41 0006 4FF47A70 		mov	r0, #1000
  42 000a FFF7FEFF 		bl	Beep
  43              	.LVL0:
  44              	.L2:
1422:main.c        ****     while(SW1_Read() == 1)
  45              		.loc 1 1422 0
  46 000e FFF7FEFF 		bl	SW1_Read
  47              	.LVL1:
  48 0012 0128     		cmp	r0, #1
  49 0014 F6D0     		beq	.L3
1427:main.c        ****     }
1428:main.c        **** }
  50              		.loc 1 1428 0
  51 0016 08BD     		pop	{r3, pc}
  52              		.cfi_endproc
  53              	.LFE85:
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 27


  54              		.size	zmain, .-zmain
  55              		.text
  56              	.Letext0:
  57              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
  58              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
  59              		.file 4 ".\\ZumoLibrary/Beep.h"
  60              		.file 5 "Generated_Source\\PSoC5/SW1.h"
  61              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
  62              		.section	.debug_info,"",%progbits
  63              	.Ldebug_info0:
  64 0000 03010000 		.4byte	0x103
  65 0004 0400     		.2byte	0x4
  66 0006 00000000 		.4byte	.Ldebug_abbrev0
  67 000a 04       		.byte	0x4
  68 000b 01       		.uleb128 0x1
  69 000c 5F000000 		.4byte	.LASF18
  70 0010 0C       		.byte	0xc
  71 0011 58000000 		.4byte	.LASF19
  72 0015 2E000000 		.4byte	.LASF20
  73 0019 00000000 		.4byte	.Ldebug_ranges0+0
  74 001d 00000000 		.4byte	0
  75 0021 00000000 		.4byte	.Ldebug_line0
  76 0025 02       		.uleb128 0x2
  77 0026 01       		.byte	0x1
  78 0027 06       		.byte	0x6
  79 0028 5A010000 		.4byte	.LASF0
  80 002c 02       		.uleb128 0x2
  81 002d 01       		.byte	0x1
  82 002e 08       		.byte	0x8
  83 002f 1C010000 		.4byte	.LASF1
  84 0033 02       		.uleb128 0x2
  85 0034 02       		.byte	0x2
  86 0035 05       		.byte	0x5
  87 0036 82010000 		.4byte	.LASF2
  88 003a 02       		.uleb128 0x2
  89 003b 02       		.byte	0x2
  90 003c 07       		.byte	0x7
  91 003d 0E000000 		.4byte	.LASF3
  92 0041 03       		.uleb128 0x3
  93 0042 72010000 		.4byte	.LASF9
  94 0046 02       		.byte	0x2
  95 0047 3F       		.byte	0x3f
  96 0048 4C000000 		.4byte	0x4c
  97 004c 02       		.uleb128 0x2
  98 004d 04       		.byte	0x4
  99 004e 05       		.byte	0x5
 100 004f 2F010000 		.4byte	.LASF4
 101 0053 02       		.uleb128 0x2
 102 0054 04       		.byte	0x4
 103 0055 07       		.byte	0x7
 104 0056 ED000000 		.4byte	.LASF5
 105 005a 02       		.uleb128 0x2
 106 005b 08       		.byte	0x8
 107 005c 05       		.byte	0x5
 108 005d 00000000 		.4byte	.LASF6
 109 0061 02       		.uleb128 0x2
 110 0062 08       		.byte	0x8
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 28


 111 0063 07       		.byte	0x7
 112 0064 FF000000 		.4byte	.LASF7
 113 0068 04       		.uleb128 0x4
 114 0069 04       		.byte	0x4
 115 006a 05       		.byte	0x5
 116 006b 696E7400 		.ascii	"int\000"
 117 006f 02       		.uleb128 0x2
 118 0070 04       		.byte	0x4
 119 0071 07       		.byte	0x7
 120 0072 21000000 		.4byte	.LASF8
 121 0076 03       		.uleb128 0x3
 122 0077 8C010000 		.4byte	.LASF10
 123 007b 03       		.byte	0x3
 124 007c 2C       		.byte	0x2c
 125 007d 41000000 		.4byte	0x41
 126 0081 02       		.uleb128 0x2
 127 0082 04       		.byte	0x4
 128 0083 04       		.byte	0x4
 129 0084 7C010000 		.4byte	.LASF11
 130 0088 02       		.uleb128 0x2
 131 0089 08       		.byte	0x8
 132 008a 04       		.byte	0x4
 133 008b 3D010000 		.4byte	.LASF12
 134 008f 02       		.uleb128 0x2
 135 0090 01       		.byte	0x1
 136 0091 08       		.byte	0x8
 137 0092 2A010000 		.4byte	.LASF13
 138 0096 02       		.uleb128 0x2
 139 0097 08       		.byte	0x8
 140 0098 04       		.byte	0x4
 141 0099 66010000 		.4byte	.LASF14
 142 009d 02       		.uleb128 0x2
 143 009e 04       		.byte	0x4
 144 009f 07       		.byte	0x7
 145 00a0 94010000 		.4byte	.LASF15
 146 00a4 05       		.uleb128 0x5
 147 00a5 16010000 		.4byte	.LASF21
 148 00a9 01       		.byte	0x1
 149 00aa 8C05     		.2byte	0x58c
 150 00ac 00000000 		.4byte	.LFB85
 151 00b0 18000000 		.4byte	.LFE85-.LFB85
 152 00b4 01       		.uleb128 0x1
 153 00b5 9C       		.byte	0x9c
 154 00b6 DF000000 		.4byte	0xdf
 155 00ba 06       		.uleb128 0x6
 156 00bb 0E000000 		.4byte	.LVL0
 157 00bf F0000000 		.4byte	0xf0
 158 00c3 D5000000 		.4byte	0xd5
 159 00c7 07       		.uleb128 0x7
 160 00c8 01       		.uleb128 0x1
 161 00c9 50       		.byte	0x50
 162 00ca 03       		.uleb128 0x3
 163 00cb 0A       		.byte	0xa
 164 00cc E803     		.2byte	0x3e8
 165 00ce 07       		.uleb128 0x7
 166 00cf 01       		.uleb128 0x1
 167 00d0 51       		.byte	0x51
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 29


 168 00d1 02       		.uleb128 0x2
 169 00d2 09       		.byte	0x9
 170 00d3 E6       		.byte	0xe6
 171 00d4 00       		.byte	0
 172 00d5 08       		.uleb128 0x8
 173 00d6 12000000 		.4byte	.LVL1
 174 00da FB000000 		.4byte	0xfb
 175 00de 00       		.byte	0
 176 00df 09       		.uleb128 0x9
 177 00e0 4D010000 		.4byte	.LASF22
 178 00e4 06       		.byte	0x6
 179 00e5 1207     		.2byte	0x712
 180 00e7 EB000000 		.4byte	0xeb
 181 00eb 0A       		.uleb128 0xa
 182 00ec 76000000 		.4byte	0x76
 183 00f0 0B       		.uleb128 0xb
 184 00f1 38010000 		.4byte	.LASF16
 185 00f5 38010000 		.4byte	.LASF16
 186 00f9 04       		.byte	0x4
 187 00fa 05       		.byte	0x5
 188 00fb 0B       		.uleb128 0xb
 189 00fc 44010000 		.4byte	.LASF17
 190 0100 44010000 		.4byte	.LASF17
 191 0104 05       		.byte	0x5
 192 0105 29       		.byte	0x29
 193 0106 00       		.byte	0
 194              		.section	.debug_abbrev,"",%progbits
 195              	.Ldebug_abbrev0:
 196 0000 01       		.uleb128 0x1
 197 0001 11       		.uleb128 0x11
 198 0002 01       		.byte	0x1
 199 0003 25       		.uleb128 0x25
 200 0004 0E       		.uleb128 0xe
 201 0005 13       		.uleb128 0x13
 202 0006 0B       		.uleb128 0xb
 203 0007 03       		.uleb128 0x3
 204 0008 0E       		.uleb128 0xe
 205 0009 1B       		.uleb128 0x1b
 206 000a 0E       		.uleb128 0xe
 207 000b 55       		.uleb128 0x55
 208 000c 17       		.uleb128 0x17
 209 000d 11       		.uleb128 0x11
 210 000e 01       		.uleb128 0x1
 211 000f 10       		.uleb128 0x10
 212 0010 17       		.uleb128 0x17
 213 0011 00       		.byte	0
 214 0012 00       		.byte	0
 215 0013 02       		.uleb128 0x2
 216 0014 24       		.uleb128 0x24
 217 0015 00       		.byte	0
 218 0016 0B       		.uleb128 0xb
 219 0017 0B       		.uleb128 0xb
 220 0018 3E       		.uleb128 0x3e
 221 0019 0B       		.uleb128 0xb
 222 001a 03       		.uleb128 0x3
 223 001b 0E       		.uleb128 0xe
 224 001c 00       		.byte	0
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 30


 225 001d 00       		.byte	0
 226 001e 03       		.uleb128 0x3
 227 001f 16       		.uleb128 0x16
 228 0020 00       		.byte	0
 229 0021 03       		.uleb128 0x3
 230 0022 0E       		.uleb128 0xe
 231 0023 3A       		.uleb128 0x3a
 232 0024 0B       		.uleb128 0xb
 233 0025 3B       		.uleb128 0x3b
 234 0026 0B       		.uleb128 0xb
 235 0027 49       		.uleb128 0x49
 236 0028 13       		.uleb128 0x13
 237 0029 00       		.byte	0
 238 002a 00       		.byte	0
 239 002b 04       		.uleb128 0x4
 240 002c 24       		.uleb128 0x24
 241 002d 00       		.byte	0
 242 002e 0B       		.uleb128 0xb
 243 002f 0B       		.uleb128 0xb
 244 0030 3E       		.uleb128 0x3e
 245 0031 0B       		.uleb128 0xb
 246 0032 03       		.uleb128 0x3
 247 0033 08       		.uleb128 0x8
 248 0034 00       		.byte	0
 249 0035 00       		.byte	0
 250 0036 05       		.uleb128 0x5
 251 0037 2E       		.uleb128 0x2e
 252 0038 01       		.byte	0x1
 253 0039 3F       		.uleb128 0x3f
 254 003a 19       		.uleb128 0x19
 255 003b 03       		.uleb128 0x3
 256 003c 0E       		.uleb128 0xe
 257 003d 3A       		.uleb128 0x3a
 258 003e 0B       		.uleb128 0xb
 259 003f 3B       		.uleb128 0x3b
 260 0040 05       		.uleb128 0x5
 261 0041 27       		.uleb128 0x27
 262 0042 19       		.uleb128 0x19
 263 0043 11       		.uleb128 0x11
 264 0044 01       		.uleb128 0x1
 265 0045 12       		.uleb128 0x12
 266 0046 06       		.uleb128 0x6
 267 0047 40       		.uleb128 0x40
 268 0048 18       		.uleb128 0x18
 269 0049 9742     		.uleb128 0x2117
 270 004b 19       		.uleb128 0x19
 271 004c 01       		.uleb128 0x1
 272 004d 13       		.uleb128 0x13
 273 004e 00       		.byte	0
 274 004f 00       		.byte	0
 275 0050 06       		.uleb128 0x6
 276 0051 898201   		.uleb128 0x4109
 277 0054 01       		.byte	0x1
 278 0055 11       		.uleb128 0x11
 279 0056 01       		.uleb128 0x1
 280 0057 31       		.uleb128 0x31
 281 0058 13       		.uleb128 0x13
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 31


 282 0059 01       		.uleb128 0x1
 283 005a 13       		.uleb128 0x13
 284 005b 00       		.byte	0
 285 005c 00       		.byte	0
 286 005d 07       		.uleb128 0x7
 287 005e 8A8201   		.uleb128 0x410a
 288 0061 00       		.byte	0
 289 0062 02       		.uleb128 0x2
 290 0063 18       		.uleb128 0x18
 291 0064 9142     		.uleb128 0x2111
 292 0066 18       		.uleb128 0x18
 293 0067 00       		.byte	0
 294 0068 00       		.byte	0
 295 0069 08       		.uleb128 0x8
 296 006a 898201   		.uleb128 0x4109
 297 006d 00       		.byte	0
 298 006e 11       		.uleb128 0x11
 299 006f 01       		.uleb128 0x1
 300 0070 31       		.uleb128 0x31
 301 0071 13       		.uleb128 0x13
 302 0072 00       		.byte	0
 303 0073 00       		.byte	0
 304 0074 09       		.uleb128 0x9
 305 0075 34       		.uleb128 0x34
 306 0076 00       		.byte	0
 307 0077 03       		.uleb128 0x3
 308 0078 0E       		.uleb128 0xe
 309 0079 3A       		.uleb128 0x3a
 310 007a 0B       		.uleb128 0xb
 311 007b 3B       		.uleb128 0x3b
 312 007c 05       		.uleb128 0x5
 313 007d 49       		.uleb128 0x49
 314 007e 13       		.uleb128 0x13
 315 007f 3F       		.uleb128 0x3f
 316 0080 19       		.uleb128 0x19
 317 0081 3C       		.uleb128 0x3c
 318 0082 19       		.uleb128 0x19
 319 0083 00       		.byte	0
 320 0084 00       		.byte	0
 321 0085 0A       		.uleb128 0xa
 322 0086 35       		.uleb128 0x35
 323 0087 00       		.byte	0
 324 0088 49       		.uleb128 0x49
 325 0089 13       		.uleb128 0x13
 326 008a 00       		.byte	0
 327 008b 00       		.byte	0
 328 008c 0B       		.uleb128 0xb
 329 008d 2E       		.uleb128 0x2e
 330 008e 00       		.byte	0
 331 008f 3F       		.uleb128 0x3f
 332 0090 19       		.uleb128 0x19
 333 0091 3C       		.uleb128 0x3c
 334 0092 19       		.uleb128 0x19
 335 0093 6E       		.uleb128 0x6e
 336 0094 0E       		.uleb128 0xe
 337 0095 03       		.uleb128 0x3
 338 0096 0E       		.uleb128 0xe
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 32


 339 0097 3A       		.uleb128 0x3a
 340 0098 0B       		.uleb128 0xb
 341 0099 3B       		.uleb128 0x3b
 342 009a 0B       		.uleb128 0xb
 343 009b 00       		.byte	0
 344 009c 00       		.byte	0
 345 009d 00       		.byte	0
 346              		.section	.debug_aranges,"",%progbits
 347 0000 1C000000 		.4byte	0x1c
 348 0004 0200     		.2byte	0x2
 349 0006 00000000 		.4byte	.Ldebug_info0
 350 000a 04       		.byte	0x4
 351 000b 00       		.byte	0
 352 000c 0000     		.2byte	0
 353 000e 0000     		.2byte	0
 354 0010 00000000 		.4byte	.LFB85
 355 0014 18000000 		.4byte	.LFE85-.LFB85
 356 0018 00000000 		.4byte	0
 357 001c 00000000 		.4byte	0
 358              		.section	.debug_ranges,"",%progbits
 359              	.Ldebug_ranges0:
 360 0000 00000000 		.4byte	.LFB85
 361 0004 18000000 		.4byte	.LFE85
 362 0008 00000000 		.4byte	0
 363 000c 00000000 		.4byte	0
 364              		.section	.debug_line,"",%progbits
 365              	.Ldebug_line0:
 366 0000 7A010000 		.section	.debug_str,"MS",%progbits,1
 366      02006001 
 366      00000201 
 366      FB0E0D00 
 366      01010101 
 367              	.LASF6:
 368 0000 6C6F6E67 		.ascii	"long long int\000"
 368      206C6F6E 
 368      6720696E 
 368      7400
 369              	.LASF3:
 370 000e 73686F72 		.ascii	"short unsigned int\000"
 370      7420756E 
 370      7369676E 
 370      65642069 
 370      6E7400
 371              	.LASF8:
 372 0021 756E7369 		.ascii	"unsigned int\000"
 372      676E6564 
 372      20696E74 
 372      00
 373              	.LASF20:
 374 002e 433A5C52 		.ascii	"C:\\Robo-Project\\Zumo-master\\ZumoBot.cydsn\000"
 374      6F626F2D 
 374      50726F6A 
 374      6563745C 
 374      5A756D6F 
 375              	.LASF19:
 376 0058 6D61696E 		.ascii	"main.c\000"
 376      2E6300
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 33


 377              	.LASF18:
 378 005f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 378      43313120 
 378      352E342E 
 378      31203230 
 378      31363036 
 379 0092 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 379      20726576 
 379      6973696F 
 379      6E203233 
 379      37373135 
 380 00c5 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 380      66756E63 
 380      74696F6E 
 380      2D736563 
 380      74696F6E 
 381              	.LASF5:
 382 00ed 6C6F6E67 		.ascii	"long unsigned int\000"
 382      20756E73 
 382      69676E65 
 382      6420696E 
 382      7400
 383              	.LASF7:
 384 00ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 384      206C6F6E 
 384      6720756E 
 384      7369676E 
 384      65642069 
 385              	.LASF21:
 386 0116 7A6D6169 		.ascii	"zmain\000"
 386      6E00
 387              	.LASF1:
 388 011c 756E7369 		.ascii	"unsigned char\000"
 388      676E6564 
 388      20636861 
 388      7200
 389              	.LASF13:
 390 012a 63686172 		.ascii	"char\000"
 390      00
 391              	.LASF4:
 392 012f 6C6F6E67 		.ascii	"long int\000"
 392      20696E74 
 392      00
 393              	.LASF16:
 394 0138 42656570 		.ascii	"Beep\000"
 394      00
 395              	.LASF12:
 396 013d 646F7562 		.ascii	"double\000"
 396      6C6500
 397              	.LASF17:
 398 0144 5357315F 		.ascii	"SW1_Read\000"
 398      52656164 
 398      00
 399              	.LASF22:
 400 014d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 400      52784275 
 400      66666572 
ARM GAS  C:\Users\8523~1\AppData\Local\Temp\ccpkO7uq.s 			page 34


 400      00
 401              	.LASF0:
 402 015a 7369676E 		.ascii	"signed char\000"
 402      65642063 
 402      68617200 
 403              	.LASF14:
 404 0166 6C6F6E67 		.ascii	"long double\000"
 404      20646F75 
 404      626C6500 
 405              	.LASF9:
 406 0172 5F5F696E 		.ascii	"__int32_t\000"
 406      7433325F 
 406      7400
 407              	.LASF11:
 408 017c 666C6F61 		.ascii	"float\000"
 408      7400
 409              	.LASF2:
 410 0182 73686F72 		.ascii	"short int\000"
 410      7420696E 
 410      7400
 411              	.LASF10:
 412 018c 696E7433 		.ascii	"int32_t\000"
 412      325F7400 
 413              	.LASF15:
 414 0194 73697A65 		.ascii	"sizetype\000"
 414      74797065 
 414      00
 415              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
